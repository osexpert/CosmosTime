// this seems pointless. it is simply a map between TimeZoneInfo.Id and TimeZoneInfo.DisplayName
#if false
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace CosmosTime.TimeZone
{
	public class MsSqlTimeZoneTool
	{
		public static void Generate(string inFile, string destFileName)
		{

			Dictionary<string, string> NameToId = new Dictionary<string, string>();
			Dictionary<string, string> IdToName = new Dictionary<string, string>();


			// Copy table from here, paste into sqltimezones
			// https://learn.microsoft.com/en-us/azure/azure-sql/managed-instance/timezones-overview
			//List<string> newLines = new List<string>();
			var liness = File.ReadLines(inFile, Encoding.UTF8);
			foreach (var l in liness)
			{
				var parts = Split(l, "(UTC");

				var p1 = parts[0].Trim();
				var p2 = ("(UTC" + parts[1]).Trim();
				//var s = $"case @tz = '{p2}' then '{p1}'";


				//var s = $"case \"{p2}\": return \"{p1}\";";
				//case "lol": return "42";

				//newLines.Add(s);

				NameToId.Add(p2, p1);
				IdToName.Add(p1, p2);
			}

			
			//File.WriteAllLines(@"e:\sqlTimezonesnewcs.txt", newLines, Encoding.UTF8);

			var f = File.OpenWrite(destFileName);
			var ff = new StreamWriter(f, new UTF8Encoding(false));

			ff.WriteLine("\t// This map is generated by a tool. Do not modify. " + DateTime.UtcNow + "Z");
			ff.WriteLine("\t\tstatic readonly Dictionary<string, string> _nameToId = new()");
			ff.WriteLine("\t\t{");
			foreach (var kv in NameToId.OrderBy(kv => kv.Key))
				ff.WriteLine("\t\t\t{\"" + kv.Key + "\", \"" + kv.Value + "\"},");
			ff.WriteLine("\t\t};");

			ff.WriteLine();

			ff.WriteLine("\t// This map is generated by a tool. Do not modify. " + DateTime.UtcNow + "Z");
			ff.WriteLine("\t\tstatic readonly Dictionary<string, string> _IdToName = new()");
			ff.WriteLine("\t\t{");
			foreach (var kv in IdToName.OrderBy(kv => kv.Value))
				ff.WriteLine("\t\t\t{\"" + kv.Key + "\", \"" + kv.Value + "\"},");
			ff.WriteLine("\t\t};");

			ff.Close();
		}

		private static string[] Split(string l, string v)
		{
			return l.Split(new string[] { v }, StringSplitOptions.None);
		}
	}
}
#endif